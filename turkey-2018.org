* Turkey 2018 elections

data from [[https://gist.github.com/oztalha/0bdaa68e53466f64055ad276f11e868e][presidential]] and [[https://gist.github.com/oztalha/63f2de239bac84f4f81e86442d1a0749][parliament]] ([[https://twitter.com/tozCSS/status/1011004328549597186][Oz Talha]]).  [[https://www.yenisafak.com/secim-cumhurbaskanligi-2018][YeniŞafak]] (and,
YeniŞafak's [[results page]], which includes data also on past elections).
unfortunately, all this is by ilce.  well, e.g., [[https://www.yenisafak.com/secim-2018/yalova-ili-secim-sonuclari][Yalova ili results]]
have quantities.

to look at what beautify finds:
#+BEGIN_SRC python :var city="yalova" :var fname="test"
  import codecs
  import requests
  import pandas as pd
  from bs4 import BeautifulSoup
  from unidecode import unidecode

  print(city)
  url = 'https://www.yenisafak.com/secim-2018/'+unidecode(city).lower()+'-ili-secim-sonuclari'
  resource = requests.get(url)
  soup = BeautifulSoup(resource.content.decode('utf-8','ignore'), "html5lib")
  fi = codecs.open(fname, "w", "utf-8")
  print >>fi, soup.prettify()
  fi.close()
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :var fname="test" :session ss
  import codecs
  import requests
  import pandas as pd
  from bs4 import BeautifulSoup
  from unidecode import unidecode

  city_meta = 'https://raw.githubusercontent.com/oztalha/2015-11-01-Elections-Turkey/master/data/city_meta.csv'
  cities = pd.read_csv(city_meta,usecols=['il']).il #Cities w/ Turkish characters

  results = {}
  attnames = []
  pnames = []
  #  for c in cities:
  for c in ['Yalova', 'Izmir']:
      print(c)
      url = 'https://www.yenisafak.com/secim-2018/'+unidecode(c).lower()+'-ili-secim-sonuclari'
      resource = requests.get(url)
      soup = BeautifulSoup(resource.content.decode('utf-8','ignore'), "html5lib")
      # kill all script, style, sub, sup and b elements
      for script in soup(["script", "style", "sup", "sub", "b"]):
          null = script.extract()    # rip it out
      # now, find voting percentages, number of ballot boxes
      attendance = soup.find_all(class_='attendance')
      if len(attendance) != 1:
          print "len(attendance) = %d too big (> 1)" % (len(attendance))
          # raise AssertionError   # XXX
      attendance = attendance[0]
      names = [i.text for i in attendance.find_all(class_='name')]
      data = [i.text.replace('.','') for i in attendance.find_all(class_='data')]
      if len(names) != len(data):
          print "len(names) = %d != len(data) = %d" % (len(names, len(data)))
          raise AssertionError
      if attnames != [] and attnames != names:
          print "attnames (= [%s]) != names (= [%s])" % (attnames, names)
          raise AssertionError    # make sure in *same* order each time
      attnames = names
      attdata = data
      # now, where are the votes?
      where = soup.select('.card > .compare > table:nth-of-type(1)')
      names = [j.text for i in where for j in i.select('.names .bars-text')]
      pmps = [int(j.text) for i in where for j in i.select('.mps .bars-text')]
      pvotes = [int(j.text.split(" ")[1].replace('.','')) for i in where for j in i.select('.ratio-back .bars-votes')]
      if len(names) != len(pmps) or len(names) != len(pvotes):
          print "len(names) (= %d) != len(pmps) (= %d) or len(pvotes) (= %d)" % (len(names), len(pmps), len(pvotes))
          raise AssertionError    # if we have different length of parties, MPs, votes
      if pnames == []:
          pnames = names          # remember party names
      pdb.set_trace()
      results[c] = attdata + pvotes + pmps

  genel = pd.DataFrame({(city):result for city,result in results.items()}, index=attnames+map(lambda x: x + " MPs", pnames) + pnames).T
  genel.index.names = ['city']
  genel.to_csv(fname, encoding="utf-8")
#+END_SRC

#+RESULTS:
#+begin_example
<script>
$(".result-switch-buttons a").click(function() {
var elem = $(this).data("type");
$(".result-content-container").removeClass("party-charts").removeClass("alliance-charts");
$(".election-switch-buttons").removeClass("active");
$(".result-content-container").addClass(elem);
$(this).addClass("active");
history.pushState('', $(this).data("title"), $(this).attr("href"));
return false;
});
</script>
#+end_example
