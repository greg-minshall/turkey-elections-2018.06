* Turkey 2018 elections

data from [[https://gist.github.com/oztalha/0bdaa68e53466f64055ad276f11e868e][presidential]] and [[https://gist.github.com/oztalha/63f2de239bac84f4f81e86442d1a0749][parliament]] ([[https://twitter.com/tozCSS/status/1011004328549597186][Oz Talha]]).  [[https://www.yenisafak.com/secim-cumhurbaskanligi-2018][YeniŞafak]] (and,
YeniŞafak's [[results page]], which includes data also on past elections).
unfortunately, all this is by ilce.  well, e.g., [[https://www.yenisafak.com/secim-2018/yalova-ili-secim-sonuclari][Yalova ili results]]
have quantities.

to look at what beautify finds:
#+BEGIN_SRC python :var city="adana" :var fname="test"
  import codecs
  import requests
  import pandas as pd
  from bs4 import BeautifulSoup
  from unidecode import unidecode

  print(city)
  url = 'https://www.yenisafak.com/secim-2018/'+unidecode(city).lower()+'-ili-secim-sonuclari'
  resource = requests.get(url)
  soup = BeautifulSoup(resource.content.decode('utf-8','ignore'), "html5lib")
  fi = codecs.open(fname, "w", "utf-8")
  print >>fi, soup.prettify()
  fi.close()
#+END_SRC

#+RESULTS:
: None

#+name: secim-2018-genel-scraper
#+BEGIN_SRC python :session ss :results none :var fname="genel-secim-2018-sonuclari.csv"
  import codecs
  import requests
  import pandas as pd
  from bs4 import BeautifulSoup
  from unidecode import unidecode

  city_meta = 'https://raw.githubusercontent.com/oztalha/2015-11-01-Elections-Turkey/master/data/city_meta.csv'
  cities = pd.read_csv(city_meta,usecols=['il'], encoding='utf-8').il #Cities w/ Turkish characters

  results = {}
  attnames = []
  pnames = set()
  for c in cities:
      print(c)
      url = 'https://www.yenisafak.com/secim-2018/'+unidecode(c).lower()+'-ili-secim-sonuclari'
      resource = requests.get(url)
      soup = BeautifulSoup(resource.content.decode('utf-8','ignore'), "html5lib")
      # kill all script, style, sub, sup and b elements
      for script in soup(["script", "style", "sup", "sub", "b"]):
          null = script.extract()    # rip it out
      # now, find voting percentages, number of ballot boxes
      attendance = soup.find_all(class_='attendance')
      if len(attendance) != 1:
          print "len(attendance) = %d too big (> 1)" % (len(attendance))
          # raise AssertionError   # XXX
      attendance = attendance[0]
      names = [i.text for i in attendance.find_all(class_='name')]
      data = [i.text.replace('.','') for i in attendance.find_all(class_='data')]
      if len(names) != len(data):
          print "len(names) = %d != len(data) = %d" % (len(names, len(data)))
          raise AssertionError
      if attnames != [] and attnames != names:
          print "attnames (= [%s]) != names (= [%s])" % (attnames, names)
          raise AssertionError    # make sure in *same* order each time
      attnames = names
      attdata = data
      # now, where are the votes?
      # (XXX need to do i.select to get *each* of the cards?)
      where = [j for i in soup.select('.card') for j in i.select('table:nth-of-type(1)')]
      names = [j.text for i in where for j in i.select('.names .bars-text')]
      pmps = [int(j.text) for i in where for j in i.select('.mps .bars-text')]
      pvotes = [int(j.text.split(" ")[1].replace('.','')) for i in where for j in i.select('.ratio-back .bars-votes')]
      if len(names) != len(pmps) or len(names) != len(pvotes):
          print "len(names) (= %d) != len(pmps) (= %d) or len(pvotes) (= %d)" % (len(names), len(pmps), len(pvotes))
          raise AssertionError    # if we have different length of parties, MPs, votes
      pmps = dict([(names[i], pmps[i]) for i in range(len(names))])
      pvotes = dict([(names[i], pvotes[i]) for i in range(len(names))])
      pnames |= set(names)          # remember party names
      results[c] = [attdata, pvotes, pmps]

  pnames = list(pnames)           # freeze order
  genel = pd.DataFrame({(city):[result[0] +
                                [result[1].get(a,0) for a in pnames] +
                                [result[2].get(a,0) for a in pnames]][0]
                        for city,result in results.items()},
                       index=attnames + pnames + map(lambda x: x + " MPs", pnames)).T
  genel.to_csv(fname, encoding="utf-8")
#+END_SRC


#+BEGIN_SRC R :session rs :var ifile="genel-secim-2018-sonuclari.csv" :results table :colnames yes :rownames yes
  x <- read.csv(ifile)
  parties <- colnames(x)[-(1:5)]
  parties <- parties[1:(length(parties)/2)]
  mps <- colnames(x)[-(1:5)]
  mps <- mps[-(1:length(parties))]
  res <- data.frame()
  total.votes <- sum(x[,parties])
  total.mps <- sum(x[,mps])
  res <- data.frame()
  for (party in parties) {
      votes <- sum(x[,party])
      mps <- sum(x[,paste(party, "MPs", sep=".")])
      df <- data.frame(votes=votes, pctvotes=votes/total.votes,
                       mps=mps, pctmps=mps/total.mps)
      rownames(df) <- party
      res <- rbind(res, df)
  }
  res
#+END_SRC

#+RESULTS:
|           |    votes |             pctvotes | mps |             pctmps |
|-----------+----------+----------------------+-----+--------------------|
| CHP       | 11348878 |     0.22638705652949 | 146 |  0.243333333333333 |
| HDP       |  5865977 |    0.117014322182306 |  67 |  0.111666666666667 |
| Diğer     |        4 | 7.97918724756719e-08 |   0 |                  0 |
| Bağımsız  |    75633 |  0.00150872467273812 |   0 |                  0 |
| SP        |   673731 |   0.0134395645087267 |   0 |                  0 |
| AK.Parti  | 21335581 |    0.425601489586592 | 295 |  0.491666666666667 |
| İYİ.Parti |  4990710 |   0.0995545239707651 |  43 | 0.0716666666666667 |
| HÜDA.PAR  |   157612 |   0.0031440391511589 |   0 |                  0 |
| VP        |   117779 |  0.00234945173707804 |   0 |                  0 |
| MHP       |  5564514 |    0.111000747869273 |  49 | 0.0816666666666667 |
